version: '3.9'
services:
  postgres:
    image: postgres:15-bullseye
    environment:
      POSTGRES_USER: datomic
      POSTGRES_PASSWORD: datomic
      POSTGRES_DB: datomic
    ports:
      - 5432:5432
    volumes:
      - ./files/init.sql:/docker-entrypoint-initdb.d/init.sql
      - datomic-storage-data:/var/lib/postgresql/data
    networks:
      - datomic-network
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "datomic"]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always

  memcached:
    image: memcached:1.6-bullseye
    ports:
      - 11211:11211
    networks:
      - datomic-network
    restart: always
    depends_on:
      postgres:
        condition: service_started

  transactor:
    image: datomic:1.0.6735-java17 
    build: 
      context: ./images/datomic/
      dockerfile: Dockerfile
    environment:
        - JVM_OPTS=-Ddatomic.metricsCallback=io.github.galuque.datomic.jmx.metrics/callback
                   -javaagent:/opt/datomic/jmx_prometheus_javaagent-0.19.0.jar=9010:/opt/datomic/jmx_exporter.yaml
    ports:
      - 4334:4334
      - 9010:9010
    volumes:
      - datomic-transactor-logs:/opt/datomic/logs
      - ./jars/datomic-jmx-metrics-0.1.5.jar:/opt/datomic/lib/datomic-jmx-metrics-0.1.5.jar
      - ./jars/jmx_prometheus_javaagent-0.19.0.jar:/opt/datomic/jmx_prometheus_javaagent-0.19.0.jar
      - ./files/jmx_exporter.yaml:/opt/datomic/jmx_exporter.yaml
    configs:
      - transactor.properties
    networks:
      - datomic-network
    healthcheck:
      test: ["CMD", "curl", "http://localhost:9999/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      memcached:
        condition: service_started

  datomic-db-init:
    image: datomic:1.0.6735-java17 
    volumes:
      - ./files/db-init.clj:/opt/datomic/db-init.clj
    networks:
      - datomic-network
    restart: on-failure:1
    entrypoint: /opt/datomic/bin/run /opt/datomic/db-init.clj
    depends_on:
      transactor:
        condition: service_healthy

  peer-server:
    image: datomic:1.0.6735-java17 
    ports:
      - 8998:8998
    volumes:
      - ./files/peer-server.sh:/opt/datomic/peer-server.sh
    networks:
      - datomic-network
    healthcheck:
      test: ["CMD", "curl", "-k", "https://localhost:8998/health"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 10s
    restart: always
    entrypoint: bash /opt/datomic/peer-server.sh
    depends_on:
      datomic-db-init:
        condition: service_completed_successfully

  console:
    image: datomic:1.0.6735-java17 
    ports:
      - 8080:8080
    networks:
      - datomic-network
    restart: always
    entrypoint: /opt/datomic/bin/console -p 8080 sql 'datomic:sql://?jdbc:postgresql://postgres:5432/datomic?user=datomic&password=datomic'
    depends_on:
      datomic-db-init:
        condition: service_completed_successfully

  prometheus:
    image: prom/prometheus:v2.45.0
    restart: unless-stopped
    volumes:
      - ./files/prometheus.yaml:/etc/prometheus/prometheus.yaml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yaml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - 9090:9090
    networks:
      - datomic-network
    depends_on:
      transactor:
        condition: service_healthy

  grafana:
    image: grafana/grafana:10.0.1
    depends_on:
      - prometheus
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - datomic-network
    restart: always

configs:
  transactor.properties:
    file: ./files/sql-transactor.properties

networks:
  datomic-network:
    driver: bridge

volumes:
  datomic-storage-data:
  datomic-transactor-logs:
  prometheus_data:
  grafana_data:
